#!/usr/bin/env python
# -*- coding:utf-8 -*-

import os,sys
import getopt
import atexit
import time
from signal import SIGTERM 

if not os.getenv('LPTROOT'):
    current_dir =  os.path.dirname(os.path.realpath(sys.modules[__name__].__file__))
    lptdir = os.path.dirname(current_dir)
    os.environ['LPTROOT'] = lptdir
else:
    lptdir = os.getenv('LPTROOT')

try:
    from lpt.lib import lptenv
    lptenv.setup(lptdir)
except ImportError:
    cwd = os.getcwd()
    os.chdir(lptdir)
    import init_env
    init_env.setup(lptdir)
    os.chdir(cwd)
    
from lpt.lib import readconfig
from lpt.lib.share import utils
from lpt.scripts import run
from lpt.lib.error import *
    
RUN_DIR = os.path.join(lptdir, "config/run")
if not os.path.isdir(RUN_DIR):
    os.makedirs(RUN_DIR)
PID_FILE = os.path.join(RUN_DIR, "lptd.pid")

def get_jobs_from_file():
    jobs_file = readconfig.lpt_conf().get_str_value('lptd', "JOBS")
    if jobs_file:
        return jobs_file
    else:
        return os.path.join(lptdir, "db/jobs.xml")
    
def get_tests_from_file():
    ''' return tests list or None'''
    TOOLS_LIST = readconfig.para_conf().get_sections()
    tests_string = readconfig.lpt_conf().get_str_value('lptd', "TESTS")
    if tests_string:
        return [ tool  for tool in tests_string.split(',') if tool in TOOLS_LIST ]
    else:
        return None

class Daemon:
    '''创建LPT守护程序'''
    
    def __init__(self, pidfile, stdin='/dev/null', stdout='/var/log/lpts.log', stderr='/var/log/lpts.log'):
        self.stdin = stdin
        self.stdout = stdout
        self.stderr = stderr
        self.pidfile = pidfile
    
    def start(self):
        RETVAL = self._get_status() 
        if RETVAL == 0:
            return 0
        #启动监控
        print "Now, Start lpts Daemon"
        self._daemonize()
        self._run()
        return 0
    
    def _daemonize(self):
        try: 
            pid = os.fork() 
            if pid > 0:
                sys.exit(0) 
        except OSError, e:
            sys.stderr.write('fork #1 failed: %d (%s)\n' % (e.errno, e.strerror))
            sys.exit(1)
  
        #os.chdir("/") 
        os.setsid() 
        os.umask(0) 
  
        #创建子进程
        try: 
            pid = os.fork() 
            if pid > 0:
                sys.exit(0) 
        except OSError, e: 
            sys.stderr.write('fork #2 failed: %d (%s)\n' % (e.errno, e.strerror))
            sys.exit(1) 
  
    	#重定向文件描述符
        sys.stdout.flush()
        sys.stderr.flush()
        si = file(self.stdin, 'r')
        so = file(self.stdout, 'a+')
        se = file(self.stderr, 'a+')
        os.dup2(si.fileno(), sys.stdin.fileno())
        os.dup2(so.fileno(), sys.stdout.fileno())
        os.dup2(se.fileno(), sys.stderr.fileno())
  
    	#创建processid文件
        #atexit.register(self.delpid)
        pid = str(os.getpid())
        file(self.pidfile, 'w+').write('%s\n' % pid)
    
    def _run(self, waitime=60*5):
        
        REBOOT= readconfig.lpt_conf().get_boolean_value('lptd', "REBOOT")
        while 1:
            #lpts.main(argv=["--run"])
            tests=get_tests_from_file()
            if tests:
                try:
                    run.run(tools_list=tests, jobs_xml=get_jobs_from_file(), clean=True, REBOOT=REBOOT)
                except TestOK:
                    print "All Tests had complete."
                    time.sleep(60)
                    if os.path.exists(self.pidfile):
                        os.remove(self.pidfile)
                    break
    
                except Exception, e:
                    print "Some unexpect event Occur and block running."
                    time.sleep(60)
                    if os.path.exists(self.pidfile):
                        os.remove(self.pidfile)
                    break
                
                else:
                    if REBOOT:
                        try:
                            time.sleep(60)	
                            if os.path.exists(self.pidfile):
                                os.remove(self.pidfile)
                            os.system("reboot")
                            break
                        except Exception,e:
                            print "Reboot OS Error: %s" % e
                    else:
                        time.sleep(60)
                        if os.path.exists(self.pidfile):
                            os.remove(self.pidfile)
                        break
            else:
                time.sleep(waitime)
                tests=get_tests_from_file()
                
    def delpid(self):
    	  os.remove(self.pidfile)

  
    def _get_pid_from_file(self):
     	#从pid文件中获取pid
        try:
            pf = file(self.pidfile,'r')
            pid = int(pf.read().strip())
            pf.close()
        except IOError:
            pid = None

        return pid

    def _get_status(self):
        pid = self._get_pid_from_file()
        if pid:
            print "Daemon is Running, pid is: %s" % pid
            return 0
        else:
            print "Daemon Not Running"
            return 1
    
    def stop(self):

        if self._get_status() == 1:
            #sys.exit(0)
            print "lptd had stop"
            return 0
    	   #杀进程
        pid = self._get_pid_from_file()
        try:
            while 1:
                os.kill(pid, SIGTERM)
                time.sleep(0.1)
        except OSError, err:
            err = str(err)
            if err.find('No such process') > 0:
                print "Now, Kill Pid %s: PASS" % pid
                if os.path.exists(self.pidfile):
                    os.remove(self.pidfile)
                    return 0
            else:
                print "Now, Kill Pid %s: FAIL" % pid 
                print  str(err)
                return 1

    def restart(self):
        self.stop()
        self.start()

    def status(self):
	     self._get_status()
         
def Usage():
    print """Usage: lptd [options]
-----------------------------------------------------
start   | Begin Run lpts, but need to had create job
stop    | Stop lpts
status  | Status lpts
restart | stop and start
------------------------------------------------------
"""
    sys.exit(1)


if __name__ == '__main__':
    if os.getuid() !=0:
        print "Run use root"
        sys.exit()
    lptd=Daemon(PID_FILE)
    if len(sys.argv) != 2:
        Usage()
    if sys.argv[1] == "start":
        lptd.start()
    elif sys.argv[1] == "stop":
        lptd.stop()
    elif sys.argv[1] == "status":
        lptd.status()
    elif sys.argv[1] == "restart":
        lptd.restart()
    else:
        Usage()
